---
import { Picture } from '@astrojs/image/components'

import ListItem from '../components/ListItem.astro'
import GithubLink from '../components/project-links/GithubLink.astro'
import ProjectLayout from '../layouts/ProjectLayout.astro'
import Section from '../components/Section.astro'

import demo from '/gameplay-demo.mp4'
import featureControls from '../images/vr-tactics/feature-controls.png'
import featurePathfinding from '../images/vr-tactics/feature-pathfinding.png'
import featureAi from '../images/vr-tactics/feature-ai.png'
import featureCancel from '../images/vr-tactics/feature-cancel.png'
import miniTest from '../images/vr-tactics/mini-test.gif'
import unitychan from '../images/vr-tactics/unitychan.jpg'
import textures from '../images/vr-tactics/textures.png'
import workflow from '/workflow.mp4'
import bug from '/creepyBug.mp4'
import Heading from '../components/Heading.astro'
import Feature from '../components/features/Feature.astro'
import FeatureImage from '../components/features/FeatureImage.astro'
import FeatureText from '../components/features/FeatureText.astro'
---

<ProjectLayout title='VR Tactics | Laura Cleveland'>
  <Section>
    <h1 class='mb-16 text-3xl font-bold'>VR Tactics</h1>
    <p class='mb-12 max-w-xl'>
      The beginnings of a turn-based tactics game for SteamVR. The combat system
      includes player- and AI-controlled turns that allow movement and attacks.
    </p>

    <div class='mb-8 rounded-2xl overflow-hidden'>
      <video autoplay loop muted class='w-full'>
        <source src={demo} type='video/mp4' />
      </video>
    </div>
  </Section>

  <div
    class='[grid-column:2] w-full h-1 bg-gradient-to-br from-[#67e9d6] to-[#6d6acb]'
  >
  </div>

  <Section>
    <div class='xs:flex xs:flex-wrap'>
      <div class='xs:grow mb-16 xs:mb-0'>
        <h2 class='mb-6 text-xl font-semibold'>Created with</h2>
        <ul>
          <ListItem>Unity</ListItem>
          <ListItem>C#</ListItem>
          <ListItem>VRTK (VR Toolkit)</ListItem>
          <ListItem>Blender</ListItem>
        </ul>
      </div>

      <div
        class='shrink-0 flex justify-center xs:flex-col xs:justify-normal gap-4 xs:gap-8 xs:items-end'
      >
        <div>
          <GithubLink url='#' />
        </div>
      </div>
    </div>
  </Section>

  <Section>
    <Heading>Background</Heading>
    <p class='mb-12 max-w-xl'>
      My husband and I were really hyped for VR when it finally hit the masses.
      When we got the Vive in 2016, we were excited to find that developing for
      it was actually pretty accessible to non-professionals. With a new medium,
      everyone was starved for content, so indie games and experiences were
      really thriving. We love tactics games, and we thought we could do some
      really cool and innovative stuff with VR for that type of gameplay. The
      tooling was very bleeding edge and not optimized for ease of learning and
      use, but
    </p>
  </Section>

  <Section>
    <Heading>Features</Heading>

    <Feature>
      <FeatureImage>
        <Picture
          src={featureControls}
          alt='controls feature'
          widths={[552, 400]}
          sizes='(max-width: 1024px) 100vw, (max-width: 1200px) 60vw, 620px'
          aspectRatio='552:462'
          class='drop-shadow-custom'
        />
      </FeatureImage>
      <FeatureText>
        The controls are anchored to one hand and you point and click with the
        other, so you can walk around the stage wherever you want and the
        controls move with you.
      </FeatureText>
    </Feature>

    <Feature>
      <FeatureImage>
        <Picture
          src={featurePathfinding}
          alt='pathfinding feature'
          widths={[552, 400]}
          sizes='(max-width: 1024px) 100vw, (max-width: 1200px) 60vw, 620px'
          aspectRatio='552:463'
          class='drop-shadow-custom'
        />
      </FeatureImage>
      <FeatureText>
        The movement uses A* pathfinding to find the shortest path to the
        destination.
      </FeatureText>
    </Feature>

    <Feature>
      <FeatureImage>
        <Picture
          src={featureAi}
          alt='AI feature'
          widths={[552, 400]}
          sizes='(max-width: 1024px) 100vw, (max-width: 1200px) 60vw, 620px'
          aspectRatio='552:463'
          class='drop-shadow-custom'
        />
      </FeatureImage>
      <FeatureText>
        The game alternates between player-controlled units and AI-controlled
        units, and the AI units move to the nearest enemy and, if in range,
        attack.
      </FeatureText>
    </Feature>

    <Feature>
      <FeatureImage>
        <Picture
          src={featureCancel}
          alt='cancel feature'
          widths={[880, 620, 400]}
          sizes='(max-width: 1024px) 100vw, (max-width: 1200px) 60vw, 620px'
          aspectRatio='706:602'
          class='drop-shadow-custom'
        />
      </FeatureImage>
      <FeatureText>
        Movements and attacks can be confirmed or cancelled. I added a state
        machine to more easily handle this functionality.
      </FeatureText>
    </Feature>
  </Section>

  <Section>
    <div class='lg:flex'>
      <p class='mb-8 lg:basis-2/5 lg:pr-10'>
        I made this mini test game, sans VR, to hammer out the details of the
        state machine, as well as some unit classes and abilities. I had a lot
        of fun implementing skills that had different areas of effect.
      </p>
      <div
        class='mb-10 lg:basis-3/5 rounded-xl overflow-hidden drop-shadow-custom'
      >
        <img src={miniTest.src} alt='' />
      </div>
    </div>
  </Section>

  <Section>
    <Heading>Challenges</Heading>
    <p class='mb-10 max-w-xl'>
      One of the more difficult and interesting problems was handling
      asynchronous operations and timed events in a game setting. Beyond the
      technical trickiness, it required a different way of thinking. Sometimes
      you have to manually give the player time to process what's happening, and
      that means waiting an appropriate amount of time between things; waiting
      for animations to finish, or to trigger a new event. It's particularly
      important with AI-controlled units; all the actions they take can happen
      practically instantaneously, but obviously a human needs time to perceive
      all of that. I spent a lot of time doing real-time testing and tweaking
      wait times to make sure things felt smooth and responsive.
    </p>
    <p class='max-w-xl'>
      Another difficult lesson for me was deciding what to do and not do on my
      own in this project. I was really interested in every part of making a
      game - the 3D modeling, texturing and painting, rigging and animating,
      creating particle effects, and on and on. I ventured into every area, some
      only briefly, some for much longer. It was really fun, and I learned a
      lot, but if I had stuck to making every asset myself, from scratch, I
      never would have gotten anywhere. This project is a great reminder for me
      to look for ways I can use resources that exist, and to always evaluate
      where my time is best spent.
    </p>
  </Section>

  <Section>
    <div class='lg:flex lg:flex-row-reverse'>
      <div class='lg:basis-2/3 lg:pl-16'>
        <Heading>Other fun stuff</Heading>
        <p class='mb-10 max-w-2xl'>
          The model I used for the character units is Unity-chan, a free asset
          released by Unity Japan that comes with many animations out of the
          box. It was a really great resource that allowed me to get up and
          running a lot faster than if I had taken the time to model and animate
          my own characters.
        </p>
      </div>

      <div class='mb-10 lg:basis-1/3 max-w-xl'>
        <div class='rounded-lg overflow-hidden drop-shadow-custom'>
          <Picture
            src={unitychan}
            alt='unity-chan'
            widths={[600, 400]}
            sizes='(max-width: 1024px) 100vw, (max-width: 1200px) 30vw, 400px'
            aspectRatio='603:266'
          />
        </div>
      </div>
    </div>

    <div class='lg:flex lg:flex-row-reverse'>
      <div class='mb-10 lg:basis-2/3 lg:pl-16'>
        <p class='mb-10'>
          The one modification I found useful to make was to differentiate the
          player and AI units. Instead of trying to find a whole different
          model, I just opened a couple of the texture files in Photoshop and
          did a quick and dirty color replacement.
        </p>
        <p>
          All the other models in the scene (except the VR controllers) were
          made by me, using Blender.
        </p>
      </div>

      <div
        class='mb-10 lg:basis-1/3 bg-gradient-to-tr from-[#c77d6b] to-[#dbc188] rounded-xl'
      >
        <div class='p-[8%]'>
          <Picture
            src={textures}
            alt='unity-chan textures'
            widths={[880, 600, 400]}
            sizes='(max-width: 1024px) 100vw, (max-width: 1200px) 30vw, 400px'
            aspectRatio='956:687'
            class='drop-shadow-custom'
          />
        </div>
      </div>
    </div>

    <div class='lg:flex lg:flex-row-reverse'>
      <p class='mb-10 lg:basis-2/3 lg:pl-16'>
        There's a lot of cool things that I didn't get to, as I pushed myself to
        get farther in the project overall rather than taking a deep dive on
        each aspect of it, as much as I really wanted to.
      </p>

      <div class='lg:basis-1/3'>
        <div class='rounded-xl overflow-hidden drop-shadow-custom'>
          <video autoplay loop muted>
            <source src={workflow} type='video/mp4' />
          </video>
        </div>
      </div>
    </div>
  </Section>

  <Section>
    <div class='flex flex-wrap justify-end'>
      <p
        class='pb-4 lg:pr-6 max-w-xs lg:basis-1/3 italic text-sm text-right text-slate-400 [text-wrap:balance]'
      >
        Some interesting things happen when your skeleton is not scaled properly
        to your mesh.
      </p>
      <div class='lg:basis-1/2'>
        <div class='rounded-xl overflow-hidden'>
          <video autoplay loop muted>
            <source src={bug} type='video/mp4' />
          </video>
        </div>
      </div>
    </div>
  </Section>

  <Section>
    <div class='flex justify-center gap-4'>
      <GithubLink url='#' />
    </div>
  </Section>
</ProjectLayout>
