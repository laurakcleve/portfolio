---
import { Picture } from '@astrojs/image/components'

import ProjectLayout from '../layouts/ProjectLayout.astro'
import thumbnail from '../images/meal-app/thumbnail.jpg'
import addGif from '../images/meal-app/purchase-item-add.gif'
import ListItem from '../components/ListItem.astro'
import SiteLink from '../components/project-links/SiteLink.astro'
import GithubLink from '../components/project-links/GithubLink.astro'
import mealAppFt1 from '../images/meal-app/mealapp-ft-1.png'
import mealAppFt2 from '../images/meal-app/mealapp-ft-2.png'
import mealAppFt3 from '../images/meal-app/mealapp-ft-3.png'
import mealAppFt5 from '../images/meal-app/mealapp-ft-5.png'
import mealAppFt6 from '../images/meal-app/mealapp-ft-6.png'
import searchFilter from '../images/meal-app/search-filter.png'
import ingredientOptions from '../images/meal-app/ingredient-options.png'
import datalist from '../images/meal-app/datalist.png'
import Section from '../components/Section.astro'
import Heading from '../components/Heading.astro'
---

<ProjectLayout title='Meal app | Laura Cleveland'>
  <Section>
    <h1 class='mb-16 text-3xl font-bold'>Meal app</h1>
    <p class='mb-12 max-w-xl'>
      This app was built to be a meal planning assistant. It keeps an inventory
      of your food, a list of your own recipes, and your grocery purchases. This
      project has been a great way for me to try out new technologies and has
      gone through several iterations over the years.
    </p>

    <Picture
      src={thumbnail}
      alt='screenshot'
      widths={[600]}
      aspectRatio='16:9'
      class='mb-8 rounded-md'
    />
  </Section>

  <div
    class='[grid-column:2] w-full h-1 bg-gradient-to-br from-[#70cdf5] to-[#6073f7]'
  >
  </div>

  <Section>
    <div class='xs:flex xs:flex-wrap'>
      <div class='xs:grow mb-20 xs:mb-0'>
        <h2 class='mb-6 text-xl font-semibold'>Created with</h2>
        <ul>
          <ListItem>React</ListItem>
          <ListItem>GraphQL</ListItem>
          <ListItem>Apollo Client</ListItem>
          <ListItem>Styled-components</ListItem>
          <ListItem>PostgreSQL</ListItem>
          <ListItem>
            Apollo Server/Go with gqlgen<span class='text-lg text-amber-500'
              >*</span
            >
          </ListItem>
        </ul>
      </div>

      <div
        class='shrink-0 flex justify-center xs:flex-col xs:justify-normal gap-4 xs:gap-8 xs:items-end'
      >
        <SiteLink url='#' />
        <GithubLink url='#' />
      </div>
    </div>

    <div class='mt-20 mb-12 ml-12 sm:ml-24 md:ml-48 lg:ml-96 text-sm leading-6'>
      <span class='text-lg text-amber-500'>*</span> I originally built the backend
      in Node and Apollo Server, and later built a second version of the server in
      Go as a way to get started learning the language. I used the gqlgen library
      to maintain the GraphQL functionality and stay compatible with my Apollo-based
      frontend.
    </div>
  </Section>

  <Section>
    <Heading>Cool features</Heading>
    <div class='flex flex-wrap mb-20'>
      <div class='lg:basis-3/5'>
        <Picture
          src={mealAppFt1}
          alt='meal app feature 1'
          widths={[706]}
          aspectRatio='706:602'
        />
      </div>
      <p class='mt-6 lg:m-0 lg:basis-2/5 lg:pl-10'>
        You can add your recipes and their ingredients to a list of meals, and
        sort them by the date you last used them, which is helpful in keeping a
        rotation. To that end, you can tag dishes that you want to be active in
        your rotation, so if you have meals that you don’t want as often, you
        can filter them out. All dishes can be filtered by categories/tags that
        are created by you.
      </p>
    </div>

    <div class='flex flex-wrap mb-20'>
      <div class='lg:basis-3/5'>
        <Picture
          src={mealAppFt2}
          alt='meal app feature 2'
          widths={[706]}
          aspectRatio='706:602'
        />
      </div>
      <p class='mt-6 lg:m-0 lg:basis-2/5 lg:pl-10'>
        The categories can be filtered by matching any of the selected
        categories, or all of them (i.e. an OR filter or an AND filter).
      </p>
    </div>

    <div class='flex flex-wrap mb-20'>
      <div class='lg:basis-3/5'>
        <Picture
          src={mealAppFt3}
          alt='meal app feature 3'
          widths={[706]}
          aspectRatio='706:602'
        />
      </div>
      <p class='mt-6 lg:m-0 lg:basis-2/5 lg:pl-10'>
        For each dish, you can see which of the ingredients you have and don’t
        have.
      </p>
    </div>

    <div class='flex flex-wrap mb-20'>
      <div class='lg:basis-3/5'>
        <img src={addGif.src} alt='' />
      </div>
      <p class='mt-6 lg:m-0 lg:basis-2/5 lg:pl-10'>
        When entering in purchase items, the form remembers details about the
        current item that you’ve previously entered and autofills them for you.
      </p>
    </div>

    <div class='flex flex-wrap mb-20'>
      <div class='lg:basis-3/5'>
        <Picture
          src={mealAppFt5}
          alt='meal app feature 5'
          widths={[706]}
          aspectRatio='706:602'
        />
      </div>
      <p class='mt-6 lg:m-0 lg:basis-2/5 lg:pl-10'>
        An item’s details page shows you its average price based on your
        purchase history, as well as the average price for each location you
        purchased it at. This helps you stay informed about your cost
        efficiency.
      </p>
    </div>

    <div class='flex flex-wrap'>
      <div class='lg:basis-3/5'>
        <Picture
          src={mealAppFt6}
          alt='meal app feature 6'
          widths={[706]}
          aspectRatio='706:602'
        />
      </div>
      <p class='mt-6 lg:m-0 lg:basis-2/5 lg:pl-10'>
        The inventory helps you reduce your food waste and use your items
        efficiently by sorting by expiration dates and listing dishes that each
        item can be used in.
      </p>
    </div>
  </Section>

  <Section>
    <div class='lg:flex'>
      <p class='mb-8 lg:basis-1/2'>
        The ingredients in dishes have a great deal of flexibility. You can make
        things optional, list substitutes, and specify another ingredient that
        this item “counts as” (e.g. your sandwich dish has “cheese” as an
        ingredient, but you have “cheddar cheese” in your fridge; for this
        situation you can make cheddar cheese fulfill the requirement for
        “cheese”). Substitutes like that are taken into account when filtering
        dishes on whether or not you have all the required ingredients.
      </p>
      <div class='mb-10 lg:basis-1/2'>
        <Picture
          src={ingredientOptions}
          alt='ingredient options'
          widths={[746]}
          aspectRatio='746:322'
        />
      </div>
    </div>

    <p class='mb-10 max-w-3xl'>
      Additionally, you can use other dishes as ingredients. This is helpful for
      things like homemade sauces that go into different things, or other meals
      that are assembled, like sandwiches or burrito bowls. It was essential to
      include this feature in order to avoid messy duplicates across dishes and
      ingredients and to keep the data more true to its source.
    </p>
    <p class='max-w-3xl'>
      These functionalities drastically changed the original database design and
      added a significant amount of complexity to the business logic, but
      greatly increased the overall usefulness of the system.
    </p>
  </Section>

  <Section>
    <Heading>Background and goal</Heading>
    <p class='mb-10 max-w-2xl'>
      I used to be terrible at figuring out what to cook on the spot. I’d end up
      in a last-minute scramble every single day, and it was a huge source of
      stress for me. I became obsessed with avoiding that stress, and dove deep
      into meal planning. I planned out every meal as far in advance as I could
      and made sure I had maximum variety from day to day. I ended up constantly
      buying ingredients for every dish under the sun, and I couldn’t keep track
      of them and use them up in time. Things went bad, and I’d kick myself for
      it.
    </p>
    <p class='max-w-2xl'>
      The obvious solution to me was, “I need a database of every food item in
      my house.” And almost immediately I started having big dreams of how
      everything could fit into a system that could tell me anything I wanted to
      know. What can I make that doesn't use chicken, and isn't a soup, that I
      haven't had for a while? What do I need to use out of the fridge ASAP, and
      what can I make with it? Have I been spending too much on eggs when I
      could be buying them cheaper elsewhere? More important than all of these
      questions was how I could do more with less. I was spending so much time
      and energy on perfecting my process and I wanted everything to be
      automated. I wanted to be able to switch my brain off and, ideally, create
      something that could do it all better than I could.
    </p>
  </Section>

  <Section>
    <div class='md:flex md:flex-wrap'>
      <div class='md:basis-2/3 lg:basis-2/5'>
        <Picture
          src={searchFilter}
          alt='search and filter'
          widths={[460]}
          aspectRatio='460:712'
        />
      </div>
      <div class='lg:basis-3/5'>
        <Heading>Technical challenges</Heading>
        <p class='mb-10'>
          In a couple of places in the app you have a big list of items or
          dishes that you can manipulate in different ways: you can sort it by
          different fields, you can apply filters, and you can do a search. You
          want these all to be applied at once; for instance if you have a
          filter active, you want to be able to search within the filtered
          results. It was a really tricky thing to implement, particularly with
          handling state and the filtered copy of the original data. When I
          tried to do multiple things with the list, running different sorts and
          filters on this state variable, I very quickly got into infinite
          rerenders. There’s probably a much better way to solve this, but I
          ended up using a single useEffect that runs on every search and every
          filter change and sorting change, and checks against each of them.
        </p>
        <p>
          Another challenge I ran into was handling dates. Using gqlgen, your
          models are generated from your schema and they’re strongly typed. So
          dates coming back from the database as a date type must be a string in
          the resolvers, and you need to decide how you want that string
          formatted, whether it’s the number of milliseconds or something else.
          I messed around with changing the data type in different places, and
          each caused its own set of problems. In the end I modified my queries
          to cast the dates to text, so the conversion is made as early as
          possible. This has worked out for me so far, but I'll be keeping it in
          mind during future changes that might cause data loss or other
          problems.
        </p>
      </div>
    </div>
  </Section>

  <Section>
    <Heading>Spotlight: &lt;datalist&gt; element</Heading>
    <div class='md:flex'>
      <div class='md:basis-1/2'>
        <p class='mb-6'>
          When you're inputting an ingredient in a recipe, or logging the
          purchase of an item, you want that item to be from the single source
          of items that already exist. You don't want to have a bunch of names
          that mean the same thing. "cheese", "cheddar cheese", "cheese,
          cheddar". That sort of thing. You want to essentially pick from a
          list. But when your list of every item ever gets in the hundreds, you
          really don't want to have to scroll through a dropdown. A
          &lt;datalist&gt; was an ideal solution for this problem because you
          can just type in what you're looking for and see what already exists.
          The other key benefit is that if you need to add a new item, you're
          not restricted to the available options, the way you would be with a
          &lt;select&gt;. You can enter in the new name as with a regular input,
          and the app will add that item to the database along with whatever
          dish or purchase item you're creating.
        </p>
      </div>

      <div class='md:basis-1/2'>
        <Picture
          src={datalist}
          alt='datalist element'
          widths={[461]}
          aspectRatio='461:382'
          class='basis-1/3'
        />
      </div>
    </div>
  </Section>

  <Section>
    <div class='flex justify-center gap-4'>
      <SiteLink url='#' />
      <GithubLink url='#' />
    </div>
  </Section>
</ProjectLayout>
